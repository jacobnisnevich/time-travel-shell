================================
CS 111 Lab 1 - Time Travel Shell
================================

==========
Created By
==========

Jacob Nisnevich  - 804275355
Alex Crosthwaite - 704278019

====================
Implementation Notes
====================

Lab 1A
======

At the heart of our implementation of the shell script reader is the 
make_command_tree function which reads through the input string and parses it
to a null-terminated char* using the get_next_byte function. The function then
preprocesses the input string via the preprocess_input function.

The preprocess_input function preprocesses the input string by calling four
separate functions on it. These are remove_comments, 
check_for_illegal_characters, deal_with_incomplete_commands, and
remove_whitespace_from end. The remove_comments function simply removes all
lines starting with a '#' character. The check_for_illegal_characters function
validates each character one-by-one. If at any point this fails, it outputs an
error message to stderr with the character that caused the fault. The next
function, deal_with_incomplete_commands, removes all new line characters after
incomplete commands, to prevent the new lines from being read as sequences.
The final function, remove_whitespace_from_end simply removes all spaces and
new line characters from the end of the input string.

After the preprocessing is completed, the next step in make_command_stream is to
invoke the split_to_command_trees function on the input string. The 
split_to_command_trees function tokenizes the input string along all sets of two
consecutive new line characters. It does this using strtok_str, a variation of 
the strtok function that allows us to tokenize by strings rather than 
characters. The next step in split_to_command_trees is to iterate through the
resulting array of command tree strings, allocate a command_stream_t and call
the convert_string_to_command_tree function on each string. Once this completes,
the head command_stream_t is returned.

In convert_string_to_command_tree, the command tree is created based on the
precedence of the different operators. Using get_first_operator_ function, 
the input string is scanned for the next available. After processing, the start
point is advanced past the found operator. Based on precedence, the new command
is either allocated as a child of the last command created, allocated as the new
root of the tree, or allocated as the replacement of the last command created.

Sequence commands have the highest precedence, so when a sequence command is 
found, it always replaces the root of the tree. 

Pipe commands have the next highest precedence. If the last processed command
is AND or OR, then the PIPE command can be created as a child if the previous command.

If the previous command was a PIPE, then the new pipe command must replace the
previous pipe command. The previous pipe command will then become the left 
child of the new pipe command. This is done to achieve the left to right
precedence for operators of the same precedence.

AND and OR commands have the lowest precedence. If the previosu command is OR or
AND, then the same process is followed for the PIPE command in order to maintain
the left to right precedence of like operators. If the previous command is any
other operator, then the new command will replace the root of the tree.

The get_first_operator simply scans the input_string to find the first (legal)
operator. When found, it returns a first_op object that contains the commmand 
type found and the position of the first character in the operator in the input
string. The first_op object is used by other functions to assign the type to 
a new command and advance the parsing past the operator found.

In the case of the first operator hit being an open parenthesis, the 
get_outer_subshell_cmd_str function is called with the pointer to the location
of the '(' character. The get_outer_subshell_cmd_str function simply returns 
the contents of the outermost parentheses. If the number of open parentheses is
greater than 0 once the end of the string is reached, the program exits with an
error message.

The parse_simple_command function takes in a string consisting of a non-zero
amount of words and an optional amount of redirections. Initially, the function
invokes strstrip, a utility function that we borrowed from the Linux kernel code
that strips all whitespace from the start and end of a string. After this, the
parse_simple_command function takes everything before the first redirect 
character, tokenizes along whitespace, and puts this into the word char** of the
new command. It then takes everything after each redirect and puts the contents
into input and output if necessary. If the input, output, or word is of length
0, the program exits with an error message.

Once make_command_stream finishes the conversion of the input string to a 
command_stream_t, it returns the command_stream_t, which we defined to be a 
linked list of command trees. 

After make_command_stream is called by main.c, read_command_stream is called
on the command_stream_t created by make_command_stream. We opted to pass the
command_stream_t by pointer in order to change which node of the linked list is
pointed to by the command stream. IN read_command_stream, the function first 
verifies that the passed command_stream is not null. If it is not null, the
current command is returned and the pointer to the command_stream is changed to
point to the next node. If it is null, the function returns null.

Lab 1B
======

For the second portion of the first lab, our goal was to make the timetrash
program fully functional. This means, that when the timetrash program executes
without any options, it should parse the shell script into individual command
trees consisting of various command types and then execute them appropriately,
in the correct order and with the currect output result.

The core of Lab 1B is the execute_command function, which takes in a command
tree and executes it appropriately. The function works with a switch statement
that checks which type of command the current command is. If the command is a
SUBSHELL, PIPE, AND, OR, or SEQUENCE command it will run either side of the tree
recursively. The SIMPLE command case is essentially the base case for the 
function. When the execution comes down to the SIMPLE command case, the
execute_simple_command function is called, which executes a simple command.

The execute_simple_command first checks if there is an input and/or an output.
If one or both of these redirects exists, then the file being redirected is
opened and duped to replace the STDIN or STDOUT file descriptor. The execvp
function is then called on the u.word part of the command.

Lab 1C
======


